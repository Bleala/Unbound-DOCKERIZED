name: CI - Docker Build Check
run-name: Unbound Container Docker Build Check âœ…
on:
  push:
    branches:
      - "main"
      - "dev"
  pull_request:
    branches: 
      - "main"
      - "dev"

jobs:
  CI-Docker-Build-Check:
    name: CI - Docker Build Check
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
    steps:
      # https://github.com/marketplace/actions/checkout
      - name: Check Out Repository Code
        uses: actions/checkout@v4.2.2

      # https://github.com/marketplace/actions/hadolint-action
      - name: Lint Dockerfile
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: ./docker/Dockerfile
      
      # https://github.com/marketplace/actions/shell-linter
      - name: Lint Shell Scripts
        uses: Azbagheri/shell-linter@v0.8.0
        with:
          exclude-paths: "LICENSE,docker/Dockerfile"

      # https://github.com/marketplace/actions/docker-setup-qemu
      - name: Set Up QEMU
        uses: docker/setup-qemu-action@v3.6.0

      # https://github.com/marketplace/actions/docker-setup-buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.10.0

      # https://github.com/marketplace/actions/docker-login
      - name: Login To GitHub Container Registry
        uses: docker/login-action@v3.4.0
        with:
          registry: ${{ secrets.GHCR_URL }}
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_TOKEN }}

      # https://github.com/marketplace/actions/build-and-push-docker-images
      - name: Build Docker Image For Validation And Scanning
        uses: docker/build-push-action@v6.17.0
        with:
          context: ./docker
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          push: true
          tags: ${{ secrets.GHCR_URL }}/${{ secrets.GHCR_USERNAME }}/${{ secrets.REPOSITORY_NAME }}:ci-docker-build
          cache-from: type=registry,ref=${{ secrets.GHCR_URL }}/${{ secrets.GHCR_USERNAME }}/${{ secrets.REPOSITORY_NAME }}:buildcache
          cache-to: type=registry,ref=${{ secrets.GHCR_URL }}/${{ secrets.GHCR_USERNAME }}/${{ secrets.REPOSITORY_NAME }}:buildcache,mode=max

      # # https://github.com/marketplace/actions/aqua-security-trivy
      - name: Scan Image For Vulnerabilities
        uses: aquasecurity/trivy-action@0.30.0
        with:
          image-ref: ${{ secrets.GHCR_URL }}/${{ secrets.GHCR_USERNAME }}/${{ secrets.REPOSITORY_NAME }}:ci-docker-build
          format: 'template'
          template: '@/contrib/sarif.tpl'
          output: trivy-results.sarif
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      # https://github.com/github/codeql-action
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: trivy-results.sarif

      # https://github.com/regclient/regclient
      - name: Clean Up 'ci-docker-build' Image
        if: success()
        run: |
          echo "Installing regctl."
          curl -sL "https://github.com/regclient/regclient/releases/latest/download/regctl-linux-amd64" -o regctl
          chmod +x ./regctl

          # regctl automatically uses the Docker Login credentials from the Docker Login Action
          echo "Deleting ci-docker-build tag from GHCR."
          ./regctl tag rm ${{ secrets.GHCR_URL }}/${{ secrets.GHCR_USERNAME }}/${{ secrets.REPOSITORY_NAME }}:ci-docker-build

          echo "Cleanup successful."
